### Einloggen in der Rolle "admin", "mitarbeiter" und "kunde"
// @name login
POST {{graphQlUrl}}
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

mutation {
  login(username: "admin", password: "p") { token expiresIn roles }
}

### Einloggen in der Rolle "mitarbeiter" und "kunde"
// @name login
POST {{graphQlUrl}}
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

mutation {
  login(username: "alfred.alpha", password: "p") { token expiresIn roles }
}

### Einloggen in der Rolle "kunde"
// @name login
POST {{graphQlUrl}}
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

mutation {
  login(username: "dirk.delta", password: "p") { token expiresIn roles }
}

### Einloggen mit falschem Passwort
// @name login
POST {{graphQlUrl}}
Content-Type: application/json
X-REQUEST-TYPE: GraphQL

mutation {
  login(username: "admin", password: "FALSCH") { token expiresIn roles }
}

### Neuen Film anlegen
POST {{graphQlUrl}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.login.token}}
X-REQUEST-TYPE: GraphQL

mutation {
  create(
    input: {
      titel: "Testgraphql",
      rating: 1,
      angebotsoption: LEIHEN,
      produzent: FOO_PRODUZENT,
      preis: 99.9,
      rabatt: 0.1,
      hochaufloesend: true,
      datum: "2022-01-31",
      isan: "0300-0000-16FF-0100-Y-0001-0005-9",
      homepage: "http://test.de/",
      genres: ["HORROR"]
    }
  )
}

### Neuen Film mit ungueltigen Daten anlegen
POST {{graphQlUrl}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.login.token}}
X-REQUEST-TYPE: GraphQL

mutation {
  create(
    input: {
      titel: "?!$",
      rating: 999,
      angebotsoption: LEIHEN,
      produzent: FOO_PRODUZENT,
      preis: -999,
      rabatt: 999,
      hochaufloesend: true,
      datum: "123",
      isan: "123",
      homepage: "?!$",
      genres: ["HORROR"]
    }
  )
}

### Vorhandenen Film aktualisieren
POST {{graphQlUrl}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.login.token}}
X-REQUEST-TYPE: GraphQL

mutation {
  update(
    input: {
      id: "00000000-0000-0000-0000-000000000003",
      version: 0,
      titel: "Geaendertgraphql",
      rating: 5,
      angebotsoption: KAUFEN,
      produzent: FOO_PRODUZENT,
      preis: 99.99,
      rabatt: 0.099,
      hochaufloesend: false,
      datum: "2022-02-01",
      isan: "0000-0003-F977-0000-O-0000-0000-2",
      homepage: "https://test.graphql/"
    }
  )
}

### Vorhandenen Film mit ungueltigen Werten aktualisieren
POST {{graphQlUrl}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.login.token}}
X-REQUEST-TYPE: GraphQL

mutation {
  update(
    input: {
      id: "00000000-0000-0000-0000-000000000003",
      version: 0,
      titel: "?!$",
      rating: 999,
      angebotsoption: LEIHEN,
      produzent: FOO_PRODUZENT,
      preis: -999,
      rabatt: 999,
      hochaufloesend: false,
      datum: "123",
      isan: "123",
      homepage: "?!$"
    }
  )
}

### Nicht-Vorhandenen Film aktualisieren
POST {{graphQlUrl}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.login.token}}
X-REQUEST-TYPE: GraphQL

mutation {
  update(
    input: {
      id: "99999999-9999-9999-9999-999999999999",
      version: 0,
      titel: "Nichtvorhanden",
      rating: 5,
      angebotsoption: KAUFEN,
      produzent: FOO_PRODUZENT,
      preis: 99.99,
      rabatt: 0.099,
      hochaufloesend: false,
      datum: "2022-02-01",
      isan: "0000-0003-F977-0000-O-0000-0000-2",
      homepage: "https://test.de/"
    }
  )
}

### Vorhandenen Film loeschen
POST {{graphQlUrl}}
Content-Type: application/json
Authorization: Bearer {{login.response.body.$.data.login.token}}
X-REQUEST-TYPE: GraphQL

mutation {
  delete(id: "00000000-0000-0000-0000-000000000060")
}
